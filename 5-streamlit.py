import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Configurar o Streamlit
st.set_page_config(page_title="Previs칚o de Expectativa de Vida", layout="wide")

# Barra lateral de navega칞칚o
st.sidebar.title("Menu de Navega칞칚o")
menu = st.sidebar.radio("Ir para", ["In칤cio", "Estat칤sticas"    , "Socioecon칪mico", "Vacina칞칚o" ])

# Carregar os modelos salvos
try:
    socioeconomic_model = joblib.load("./models/socioeconomic_predictions.pkl")
    vaccination_model = joblib.load("./models/vaccination_predictions.pkl")
    st.sidebar.success("Modelos carregados com sucesso!")
except FileNotFoundError:
    st.sidebar.error("Erro: Um ou mais modelos n칚o foram encontrados. Verifique o diret칩rio './models'.")
    st.stop()

# P치gina inicial (In칤cio)
if menu == "In칤cio":
    st.markdown("<h2>游깴 Previs칚o de Expectativa de Vida</h2>", unsafe_allow_html=True)
    st.markdown(
        "<p>Este sistema ajuda a prever a expectativa de vida com base em vari치veis demogr치ficas, cl칤nicas e socioecon칪micas.</p>",
        unsafe_allow_html=True
    )

# P치gina de an치lises
elif menu == "Estat칤sticas":
    st.title("游늵 Estat칤sticas e An치lises dos Dados")

    # Carregar um dataset para an치lises
    try:
        df = pd.read_csv("./data/Life_Expectancy_Clean.csv")
        st.success("Dataset carregado com sucesso!")
        
        # Estat칤sticas gerais
        st.subheader("Estat칤sticas Descritivas")
        st.write(df.describe())
        
        # Criar um gr치fico interativo de correla칞칚o
        st.subheader("游늵 Matriz de Correla칞칚o")
        corr_matrix = df.corr()
        st.write(corr_matrix.style.background_gradient(cmap="coolwarm"))

    except FileNotFoundError:
        st.error("Erro: O dataset './data/Life_Expectancy_Data.csv' n칚o foi encontrado.")




# P치gina de previs칚o para o modelo Socioecon칪mico
elif menu == "Socioecon칪mico":
    st.title("游늳 Previs칚o de Expectativa de Vida - Modelo Socioecon칪mico")
    st.write("Insira os dados abaixo para prever a expectativa de vida com base em fatores socioecon칪micos:")

    # Vari치veis do modelo socioecon칪mico (usadas no treinamento)
    feature_columns = ['percentage expenditure', 'Total expenditure', 'GDP', 'Income composition of resources', 'Schooling']

    # Criar uma entrada padr칚o para os dados de entrada
    input_data = {feature: st.slider(f"{feature}", 0.0, 100.0, 50.0) for feature in feature_columns}

    # Criar DataFrame para entrada do modelo
    input_df = pd.DataFrame([input_data])

    # Adicionar colunas ausentes com valores padr칚o (0.0) para garantir compatibilidade
    for column in socioeconomic_model.feature_names_in_:
        if column not in input_df.columns:
            input_df[column] = 0.0

    # Garantir a mesma ordem de colunas que foi usada no treinamento
    input_df = input_df[socioeconomic_model.feature_names_in_]

    # Fazer previs칚o
    if st.button("Fazer Previs칚o - Modelo Socioecon칪mico"):
        try:
            prediction = socioeconomic_model.predict(input_df)[0]
            st.write(f"**Expectativa de Vida Prevista (Socioecon칪mico):** {round(prediction, 2)} anos")
        except ValueError as e:
            st.error(f"Erro ao fazer a previs칚o: {e}")

    # Exibir a import칙ncia das vari치veis
    st.subheader("游늵 Import칙ncia das Vari치veis no Modelo Socioecon칪mico")
    try:
        feature_importances = pd.DataFrame({
            "Vari치vel": socioeconomic_model.feature_names_in_,
            "Import칙ncia": socioeconomic_model.feature_importances_
        }).sort_values(by="Import칙ncia", ascending=False)
        st.bar_chart(feature_importances.set_index("Vari치vel"))
    except AttributeError:
        st.warning("A import칙ncia das vari치veis n칚o est치 dispon칤vel para o modelo carregado.")







# P치gina de previs칚o para o modelo de Vacina칞칚o
elif menu == "Vacina칞칚o":
    st.title("游늳 Previs칚o de Expectativa de Vida - Modelo de Vacina칞칚o")
    st.write("Insira os dados abaixo para prever a expectativa de vida com base em taxas de vacina칞칚o:")

    # Vari치veis do modelo de vacina칞칚o
    feature_columns = ['Hepatitis B', 'Polio', 'Diphtheria', 'percentage expenditure']

    # Criar uma entrada padr칚o para os dados de entrada
    input_data = {feature: st.slider(f"{feature}", 0.0, 100.0, 50.0) for feature in feature_columns}

    # Criar DataFrame para entrada do modelo
    input_df = pd.DataFrame([input_data])

    # Adicionar colunas ausentes com valores padr칚o (0.0) para garantir compatibilidade
    for column in vaccination_model.feature_names_in_:
        if column not in input_df.columns:
            input_df[column] = 0.0

    # Garantir a mesma ordem de colunas que foi usada no treinamento
    input_df = input_df[vaccination_model.feature_names_in_]

    # Fazer previs칚o
    if st.button("Fazer Previs칚o - Modelo de Vacina칞칚o"):
        try:
            prediction = vaccination_model.predict(input_df)[0]
            st.write(f"**Expectativa de Vida Prevista (Vacina칞칚o):** {round(prediction, 2)} anos")
        except ValueError as e:
            st.error(f"Erro ao fazer a previs칚o: {e}")
