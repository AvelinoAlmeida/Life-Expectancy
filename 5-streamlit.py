import streamlit as st
import pandas as pd
import numpy as np
import joblib
import matplotlib.pyplot as plt
import seaborn as sns

# Configurar a p√°gina
st.set_page_config(page_title="Sistema de Apoio √† Decis√£o", layout="wide")

def load_css(file_path):
    """
    Carrega um arquivo CSS e aplica no Streamlit.

    Args:
        file_path (str): Caminho para o arquivo CSS.
    """
    try:
        with open(file_path, "r") as f:
            css = f.read()
            st.markdown(f"<style>{css}</style>", unsafe_allow_html=True)
    except FileNotFoundError:
        st.error(f"Erro: Arquivo CSS '{file_path}' n√£o encontrado.")
    except Exception as e:
        st.error(f"Ocorreu um erro ao carregar o CSS: {e}")

# Carregar o arquivo CSS geral
load_css("./css/config.css")


# Carregar os modelos salvos
try:
    socioeconomic_model = joblib.load("./models/socioeconomic_predictions.pkl")
    vaccination_model = joblib.load("./models/vaccination_predictions.pkl")
    st.sidebar.success("Modelos carregados com sucesso!")
except FileNotFoundError:
    st.sidebar.error("Erro: Um ou mais modelos n√£o foram encontrados. Verifique o diret√≥rio './models'.")
    st.stop()


# Configurar o menu no Streamlit
st.sidebar.title("Menu")
menu = st.sidebar.radio(
    "Ir para:",
    ["Home", "Estat√≠sticas", "Treino", "Socioecon√¥mico", "Vacina√ß√£o"],
    index=0
)


# Controle de navega√ß√£o
if menu == "Home":
    st.title("üè† Bem-vindo!")
elif menu == "Estat√≠sticas":
    st.title("üìä An√°lises e Estat√≠sticas do Dataset")
elif menu == "Treino":
    st.title("üìà Treino de Modelos")    
elif menu == "Socioecon√¥mico":
    st.title("üåç Modelo Socioecon√¥mico")
elif menu == "Vacina√ß√£o":
    st.title("üíâ Modelo de Vacina√ß√£o")



## P√°gina Home
if menu == "Home":

    st.write("Esta √© a p√°gina inicial do sistema de apoio √† decis√£o.")
    
    # Adicionar uma imagem
    st.image("./img/imagem1.jpg", caption="Sistema de Apoio √† Decis√£o")

    st.markdown("<h2>üåç Previs√£o de Expectativa de Vida</h2>", unsafe_allow_html=True)
    st.markdown(
        "<p>Este sistema ajuda a prever a expectativa de vida com base em vari√°veis demogr√°ficas, cl√≠nicas e socioecon√¥micas.</p>",
        unsafe_allow_html=True
    )


# Carregar o dataset original
    df = pd.read_csv("./data/Life Expectancy Data.csv")
    
# Estat√≠sticas gerais do dataset original
    st.subheader("Dataset Original")
    st.write(df.describe())

  # Dados em falta
    st.subheader("Dados em falta")
    st.image("./img/grafico1.png", caption="Dados em falta")
    
# Matriz de Correla√ß√£o do Dataset Original
    st.subheader("Correla√ß√£o - Dataset Original")
    numeric_df = df.select_dtypes(include=["number"])
    corr_matrix = numeric_df.corr()
    st.write(corr_matrix.style.background_gradient(cmap="coolwarm"))

# An√°lise dos atributos
    st.subheader("An√°lise dos atributos")
    st.image("./img/grafico2.png", caption="An√°lise dos atributos")


# P√°gina de an√°lises
elif menu == "Estat√≠sticas":
    
# Adicionar uma imagem ilustrativa
    st.image("./img/imagem2.jpg", caption="Processo de An√°lise")

# Introdu√ß√£o
    st.subheader("üìã Observa√ß√µes sobre o novo Dataset")
    st.markdown("""
    - **Os dados foram limpos** e todas as linhas com valores nulos foram removidas.
    - **N√£o existe mais valores nulos no dataset.**
    - O **dataset original** tinha **2.938 registos** e **22 colunas**.
    - Ap√≥s a limpeza, o **dataset atual** cont√©m **1.649 entradas**.
    """)
# Distribui√ß√£o dos Dados
    st.subheader("An√°lise dos atributos depois de limpos")
    st.image("./img/grafico3.png", caption="An√°lise dos atributos")

# GDP
    st.subheader("üìã Aplica√ß√£o da Transforma√ß√£o Logar√≠tmica")
    st.markdown("""
    T√©cnica de pr√©-processamento de dados em que se aplica a fun√ß√£o logar√≠tmica a um ou mais valores de um conjunto de dados
    quando os dados apresentam uma distribui√ß√£o assim√©trica positiva (longa cauda √† direita), 
    a transforma√ß√£o logar√≠tmica ajuda a tornar a distribui√ß√£o mais sim√©trica
    """)    
    st.image("./img/grafico4.png", caption="An√°lise dos atributos")

# Distribui√ß√£o Final dos Dados
    st.subheader("Distribui√ß√£o Final dos Dados")
    st.image("./img/grafico5.png", caption="Dataset_Clean")
  


# P√°gina de Treino de Modelos
elif menu == "Treino":
    st.write("Nesta p√°gina, apresentamos os modelos de previs√£o treinados, suas m√©tricas de desempenho e an√°lises visuais.")

    import json

# Carregar m√©tricas do modelo Socioecon√¥mico
    try:
        with open("./models/socioeconomic_metrics.json", "r") as f:
            socioeconomic_metrics = json.load(f)
    except FileNotFoundError:
        socioeconomic_metrics = None
        st.error("M√©tricas do modelo Socioecon√¥mico n√£o encontradas!")

# Carregar m√©tricas do modelo de Vacina√ß√£o
    try:
        with open("./models/vaccination_metrics.json", "r") as f:
            vaccination_metrics = json.load(f)
    except FileNotFoundError:
        vaccination_metrics = None
        st.error("M√©tricas do modelo de Vacina√ß√£o n√£o encontradas!")

    st.subheader("Objetivo - Previs√£o m√©dia de vida (anos)")
    st.image("./img/grafico6.png", caption="Dataset_Clean")



# Apresentar os resultados do modelo Socioecon√¥mico
    st.subheader("üåç Modelo Socioecon√¥mico (Random Forest)")

    if socioeconomic_metrics:
        # M√©tricas do modelo Socioecon√¥mico
        st.markdown("**M√©tricas Iniciais de Teste do Modelo Socioecon√¥mico**")
        st.write(f"- **MAE:** {socioeconomic_metrics.get('mae', 'N/A')}")
        st.write(f"- **MSE:** {socioeconomic_metrics.get('mse', 'N/A')}")
        st.write(f"- **R¬≤:** {socioeconomic_metrics.get('r2', 'N/A')}")

        st.image("./img/grafico7.png", caption="Modelo Teste Socioecon√¥mico")
        st.image("./img/grafico8.png", caption="Modelo Final - Gradient Boosting Machine")


# Apresentar os resultados do modelo de Vacina√ß√£o
    st.subheader("üíâ Modelo de Vacina√ß√£o (Random Forest)")

    if vaccination_metrics:
        # M√©tricas do modelo de Vacina√ß√£o
        st.markdown("**M√©tricas do Modelo de Vacina√ß√£o**")
        st.write(f"- **MAE:** {vaccination_metrics.get('mae', 'N/A')}")
        st.write(f"- **MSE:** {vaccination_metrics.get('mse', 'N/A')}")
        st.write(f"- **R¬≤:** {vaccination_metrics.get('r2', 'N/A')}")

        st.image("./img/grafico9.png", caption="Modelo Teste Vacina√ß√£o")
        st.image("./img/grafico10.png", caption="Modelo Final - Gradient Boosting Machine")

        

## P√°gina de previs√£o para o modelo Socioecon√¥mico
elif menu == "Socioecon√¥mico":
    st.title("üìà Previs√£o de Expectativa de Vida")
    st.write("Ajuste os valores abaixo para prever automaticamente a expectativa de vida com base em altera√ß√µes percentuais nas vari√°veis socioecon√¥micas:")

    # Carregar o dataset limpo para refer√™ncia
    try:
        df_clean = pd.read_csv("./data/Life_Expectancy_Clean.csv")
        st.success("Dataset limpo carregado com sucesso!")
    except FileNotFoundError:
        st.error("Erro: O dataset './data/Life_Expectancy_Clean.csv' n√£o foi encontrado.")
        st.stop()

    # Vari√°veis do modelo socioecon√¥mico (usadas no treinamento)
    feature_columns = [
        'percentage expenditure', 
        'Total expenditure', 
        'GDP', 
        'Income composition of resources', 
        'Schooling'
    ]

    # Calcular os valores m√©dios das vari√°veis no dataset limpo
    avg_values = df_clean[feature_columns].mean()

    # Criar sliders para ajustes percentuais com base no valor m√©dio
    st.subheader("üìä Ajuste Percentual das Vari√°veis (em rela√ß√£o ao valor m√©dio)")
    input_data = {}
    for feature in feature_columns:
        # Valor m√©dio da vari√°vel
        base_value = avg_values[feature]

        # Slider para ajuste percentual (-10% a +10%, com passos de 2%)
        adjustment = st.slider(
            f"Ajuste de {feature} (%)",
            -10, 10, 0, step=2,  # Intervalo de ajuste: -10% a +10%, come√ßando em 0
            key=feature
        )

        # Calcular o valor ajustado com base no percentual
        adjusted_value = base_value * (1 + adjustment / 100)
        input_data[feature] = adjusted_value

        # Mostrar o valor ajustado
        st.write(f"Valor ajustado de **{feature}**: {adjusted_value:.2f} (base: {base_value:.2f}, ajuste: {adjustment}%)")

    # Criar DataFrame para entrada do modelo
    input_df = pd.DataFrame([input_data])

    # Adicionar colunas ausentes com valores padr√£o (0.0) para garantir compatibilidade
    for column in socioeconomic_model.feature_names_in_:
        if column not in input_df.columns:
            input_df[column] = 0.0

    # Garantir a mesma ordem de colunas usada no treinamento
    input_df = input_df[socioeconomic_model.feature_names_in_]

    # Fazer previs√£o automaticamente ao alterar os sliders
    try:
        prediction = socioeconomic_model.predict(input_df)[0]
        st.success(f"**Expectativa de Vida Prevista:** {round(prediction, 2)} anos")
    except ValueError as e:
        st.error(f"Erro ao fazer a previs√£o: {e}")

    # Exibir a import√¢ncia das vari√°veis
    st.subheader("üìä Import√¢ncia das Vari√°veis no Modelo Socioecon√¥mico")
    try:
        feature_importances = pd.DataFrame({
            "Vari√°vel": socioeconomic_model.feature_names_in_,
            "Import√¢ncia": socioeconomic_model.feature_importances_
        }).sort_values(by="Import√¢ncia", ascending=False)
        st.bar_chart(feature_importances.set_index("Vari√°vel"))
    except AttributeError:
        st.warning("A import√¢ncia das vari√°veis n√£o est√° dispon√≠vel para o modelo carregado.")


# P√°gina de previs√£o para o modelo de Vacina√ß√£o
elif menu == "Vacina√ß√£o":
    st.title("üìà Previs√£o de Expectativa de Vida")
    st.write("Ajuste os valores abaixo para prever automaticamente a expectativa de vida com base em taxas de vacina√ß√£o:")

    # Carregar o dataset limpo para refer√™ncia
    try:
        df_clean = pd.read_csv("./data/Life_Expectancy_Clean.csv")
        st.success("Dataset limpo carregado com sucesso!")
    except FileNotFoundError:
        st.error("Erro: O dataset './data/Life_Expectancy_Clean.csv' n√£o foi encontrado.")
        st.stop()

    # Vari√°veis do modelo de vacina√ß√£o
    feature_columns = [
        'Hepatitis B',
        'Polio',
        'Diphtheria',
        'percentage expenditure'
    ]

    # Calcular os valores m√©dios das vari√°veis no dataset limpo
    avg_values = df_clean[feature_columns].mean()

    # Criar sliders para ajustes percentuais com base no valor m√©dio
    st.subheader("üìä Ajuste Percentual das Vari√°veis (em rela√ß√£o ao valor m√©dio)")
    input_data = {}
    for feature in feature_columns:
        # Valor m√©dio da vari√°vel
        base_value = avg_values[feature]

        # Slider para ajuste percentual (-10% a +10%, com passos de 2%)
        adjustment = st.slider(
            f"Ajuste de {feature} (%)",
            -10, 10, 0, step=2,  # Intervalo de ajuste: -10% a +10%
            key=feature
        )

        # Calcular o valor ajustado com base no percentual
        adjusted_value = base_value * (1 + adjustment / 100)
        input_data[feature] = adjusted_value

        # Mostrar o valor ajustado
        st.write(f"Valor ajustado de **{feature}**: {adjusted_value:.2f} (base: {base_value:.2f}, ajuste: {adjustment}%)")

    # Criar DataFrame para entrada do modelo
    input_df = pd.DataFrame([input_data])

    # Adicionar colunas ausentes com valores padr√£o (0.0) para garantir compatibilidade
    for column in vaccination_model.feature_names_in_:
        if column not in input_df.columns:
            input_df[column] = 0.0

    # Garantir a mesma ordem de colunas usada no treinamento
    input_df = input_df[vaccination_model.feature_names_in_]

    # Fazer previs√£o automaticamente ao alterar os sliders
    try:
        prediction = vaccination_model.predict(input_df)[0]
        st.success(f"**Expectativa de Vida Prevista (Vacina√ß√£o):** {round(prediction, 2)} anos")
    except ValueError as e:
        st.error(f"Erro ao fazer a previs√£o: {e}")

    # Exibir a import√¢ncia das vari√°veis
    st.subheader("üìä Import√¢ncia das Vari√°veis no Modelo de Vacina√ß√£o")
    try:
        feature_importances = pd.DataFrame({
            "Vari√°vel": vaccination_model.feature_names_in_,
            "Import√¢ncia": vaccination_model.feature_importances_
        }).sort_values(by="Import√¢ncia", ascending=False)
        st.bar_chart(feature_importances.set_index("Vari√°vel"))
    except AttributeError:
        st.warning("A import√¢ncia das vari√°veis n√£o est√° dispon√≠vel para o modelo carregado.")
